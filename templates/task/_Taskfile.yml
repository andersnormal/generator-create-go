version: "2"

vars:
  Dir:
    sh: basename "$PWD"

tasks:
  default:
    cmds:
      <% if (type === 'APP') { %> - task: run <% } %>
      <% if (type === 'LIBRARY') { %> - task: test <% } %>
      <% if (type === 'LIBRARY') { %> - task: cov <% } %>
      <% if (type === 'LIBRARY') { %> - task: vet <% } %>
      <% if (type === 'LIBRARY') { %> - task: lint <% } %>

  run:
    desc: Run the glorious app.
    cmds:
      - task: build
      - ./bin/{{.Dir}}{{exeExt}}

  clean:
    desc: Cleanup the build artifacts.
    cmds:
      - echo "Cleaning ..."
      - rm -rf bin/ *.html *.out | exit 0;

  watch:
    desc: Watch changes in *.go files and rebuild
    cmds:
      - watch

  install:
    desc: Install all dependencies.
    cmds:
      - echo "Installing Dependencies ..."
      - go get -u github.com/golang/dep/cmd/dep
      - go get -u github.com/alecthomas/gometalinter
      - go get -u github.com/kisielk/errcheck
      <% if (type === 'APP') { %>- go get -u github.com/tcnksm/ghr <% } %>
      <% if (type === 'APP') { %>- go get -u github.com/mitchellh/gox <% } %>

  test:
    desc: Run all the go tests.
    cmds:
      - go test -v -race ./...

  cov:
    desc: Generate test converage.
    cmds:
      - go test -v -cover -coverprofile=c.out
      - go tool cover -html=c.out -o coverage.html

  vet:
    desc: Reports suspicious code.
    cmds:
      - go vet ./...

  lint:
    desc: Run all the linters.
    cmds:
      - gometalinter --disable-all --enable=errcheck --enable=vet --enable=vetshadow ./...

  ci:
    desc: Run it like Volkswagen.
    cmds:
      - task: test
      - task: lint

  <% if (type === 'APP') { %>
  build:
    desc: Run all the go tests.
    sources:
      - ./*.go
    generates:
      - bin/*.{{exeExt}}
    cmds:
      - echo "Building ({{.Dir}}) ..."
      - mkdir -p bin
      - gox -output {{printf "bin/{{.Dir}}_{{.OS}}_{{.Arch}}"}} -os="linux" -os="darwin" -arch="386" -arch="amd64" ./
      - go build -i -o bin/{{.Dir}}
  <% } %>

  <% if (type === 'APP') { %>
  docker:
    desc: Build docker.
    deps: [release]
    cmds:
      - docker build --build-arg BIN={{.Dir}} -t {{.Dir}}:latest .
  <% } %>

  <% if (type === 'APP') { %>
  release:
    desc: Release the glorious app.
    deps: [clean, test, lint, cov]
    generates:
      - bin/*.{{exeExt}}
    cmds:
      - task: build
  <% } %>
